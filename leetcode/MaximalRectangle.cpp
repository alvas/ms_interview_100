#include <iostream>
#include <vector>

#include "NormalData.h"

using namespace std;

class Solution {
public:
    // Need to improve.
    int maximalRectangle(vector<vector<char> >& matrix) {
        int row = matrix.size(), col = 0;

        if (row > 0)
        {
            col = matrix[0].size();
        }
        else
        {
            return 0;
        }

        int maxV = 0;

        for (int i = 0; i < row; ++i)
        {
            for (int j = 0; j < col; ++j)
            {

                if (matrix[i][j] == '1')
                {
                    int area = 0;
                    int c = j;

                    for ( ; c < col; ++c)
                    {
                        if (matrix[i][c] != '1')
                        {
                            break;
                        }
                    }

                    int w = c - j; 

                    for (int r = i ; r < row; ++r)
                    {
                        int k = 0;
                        
                        for ( ; k < w; ++k)
                        {
                            if (matrix[r][j + k] != '1')
                            {
                                break;
                            }
                        }

                        if (k == 0)
                        {
                            break;
                        }

                        w = min(k, w);
                        area = w * (r - i + 1);
                        maxV = max(maxV, area);
                    }
                }
            }
        }

        return maxV;
    }
};

int main()
{
    Solution sln;
    const int ROW = 6, COL = 6;
    //int a[ROW][COL] = {{'0'}};
    //int a[ROW][COL] = {{'1'}};

    //int a[ROW][COL] = 
    //{
        //{'1', '0', '1', '1', '1'},
        //{'0', '1', '0', '0', '0'},
        //{'1', '1', '0', '1', '1'},
        //{'1', '1', '0', '1', '1'},
        //{'0', '1', '1', '1', '1'},
    //};

    int a[ROW][COL] = 
    {
        {'1', '0', '1', '1', '0', '1'},
        {'1', '1', '1', '1', '1', '1'},
        {'0', '1', '1', '0', '1', '1'},
        {'1', '1', '1', '0', '1', '0'},
        {'0', '1', '1', '1', '1', '1'},
        {'1', '1', '0', '1', '1', '1'},
    };

    /*
    int a[ROW][COL] = 
    {
        {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'}
    };
    */

    vector<vector<char> > matrix;

    for (int i = 0; i < ROW; ++i)
    {
        vector<char> b(a[i], a[i] + COL);
        matrix.push_back(b);
    }

    std::cout << sln.maximalRectangle(matrix) << endl;
    return 0;
}
